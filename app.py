{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "420422dc-e991-4ff0-b6dc-4e67ba4127de",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import spacy\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "import stopwordsiso as stopwords\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# --- KeywordExtractorPremium ---\n",
    "class KeywordExtractorPremium:\n",
    "    def __init__(self, model_name=\"pl_core_news_sm\", language=\"pl\"):\n",
    "        self.nlp = spacy.load(model_name)\n",
    "        self.stop_words = stopwords.stopwords(language)\n",
    "    \n",
    "    def noun_chunks_extractor(self, text):\n",
    "        doc = self.nlp(text)\n",
    "        return [\n",
    "            chunk.text.lower().strip()\n",
    "            for chunk in doc.noun_chunks\n",
    "            if len(chunk.text.split()) > 1\n",
    "            and not any(word in self.stop_words for word in chunk.text.lower().split())\n",
    "        ]\n",
    "    \n",
    "    def lemmatized_keywords_extractor(self, text):\n",
    "        doc = self.nlp(text)\n",
    "        return [\n",
    "            token.lemma_.lower()\n",
    "            for token in doc\n",
    "            if token.pos_ in {'NOUN', 'PROPN', 'ADJ'}\n",
    "            and not token.is_stop\n",
    "            and not token.is_punct\n",
    "            and token.lemma_.lower() not in self.stop_words\n",
    "        ]\n",
    "    \n",
    "    def compute_tfidf(self, texts, extractor, top_n=10):\n",
    "        tokenized_texts = [\" \".join(extractor(text)) for text in texts]\n",
    "        vectorizer = TfidfVectorizer()\n",
    "        tfidf_matrix = vectorizer.fit_transform(tokenized_texts)\n",
    "        \n",
    "        feature_names = vectorizer.get_feature_names_out()\n",
    "        tfidf_array = tfidf_matrix.toarray()\n",
    "        \n",
    "        tfidf_scores = tfidf_array.sum(axis=0)\n",
    "        scores = list(zip(feature_names, tfidf_scores))\n",
    "        scores_sorted = sorted(scores, key=lambda x: x[1], reverse=True)\n",
    "        \n",
    "        return scores_sorted[:top_n]\n",
    "    \n",
    "    def extract_keywords(self, texts, top_n=10):\n",
    "        if isinstance(texts, str):\n",
    "            texts = [texts]\n",
    "        return self.compute_tfidf(texts, self.lemmatized_keywords_extractor, top_n)\n",
    "    \n",
    "    def extract_phrases(self, texts, top_n=10):\n",
    "        if isinstance(texts, str):\n",
    "            texts = [texts]\n",
    "        return self.compute_tfidf(texts, self.noun_chunks_extractor, top_n)\n",
    "    \n",
    "    def plot_top_items(self, items, title=\"Top items\"):\n",
    "        labels, scores = zip(*items)\n",
    "        fig, ax = plt.subplots(figsize=(10, 6))\n",
    "        ax.barh(labels[::-1], scores[::-1])\n",
    "        ax.set_title(title)\n",
    "        ax.set_xlabel(\"TF-IDF Score\")\n",
    "        plt.tight_layout()\n",
    "        return fig\n",
    "\n",
    "# --- Streamlit app ---\n",
    "st.title(\"üìù Keyword & Phrase Extractor (Polski) üöÄ\")\n",
    "st.write(\"Wprowad≈∫ tekst poni≈ºej, aby wyciƒÖgnƒÖƒá s≈Çowa i frazy kluczowe na podstawie TF-IDF.\")\n",
    "\n",
    "input_text = st.text_area(\"Wpisz tekst tutaj:\", height=300)\n",
    "\n",
    "top_n = st.slider(\"Ile TOP fraz/s≈Ç√≥w pokazaƒá?\", min_value=5, max_value=20, value=10)\n",
    "\n",
    "if st.button(\"üîç WyciƒÖgnij s≈Çowa i frazy kluczowe\"):\n",
    "    if input_text.strip() == \"\":\n",
    "        st.warning(\"‚ùóÔ∏è Wprowad≈∫ tekst.\")\n",
    "    else:\n",
    "        extractor = KeywordExtractorPremium()\n",
    "        \n",
    "        with st.spinner(\"Analizujƒô tekst...\"):\n",
    "            phrases = extractor.extract_phrases(input_text, top_n)\n",
    "            keywords = extractor.extract_keywords(input_text, top_n)\n",
    "        \n",
    "        st.subheader(\"üìå Top Frazy Kluczowe\")\n",
    "        for phrase, score in phrases:\n",
    "            st.write(f\"**{phrase}** ‚Äî {score:.4f}\")\n",
    "        \n",
    "        st.pyplot(extractor.plot_top_items(phrases, title=\"Top Frazy Kluczowe\"))\n",
    "        \n",
    "        st.subheader(\"üìå Top S≈Çowa Kluczowe\")\n",
    "        for word, score in keywords:\n",
    "            st.write(f\"**{word}** ‚Äî {score:.4f}\")\n",
    "        \n",
    "        st.pyplot(extractor.plot_top_items(keywords, title=\"Top S≈Çowa Kluczowe\"))\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
